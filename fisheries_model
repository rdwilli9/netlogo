globals [
  biomass        ; sum of the school sizes of all schools
  yield          ; total catch of all boats per tick
  cumbiomass     ; help variable to calculate the mean biomass between ticks 2000 and 2100.
  cumyield       ; total catch since start of simulation
]
breed [schools school]
breed [boats boat]
schools-own [ school-size ]
boats-own [
  catch         ; how much caught in one tick
  total-catch   ;  how much currently in the boat
  ]
patches-own [observed] ; used by boats to keep track of locations where fish were present

to setup
  ca

  ask patches [ set pcolor sky + 2 ]  ;; paint the sea pale sky blue

  set-default-shape schools "fish"
  set-default-shape boats "person"
  set biomass 0

  create-schools initial-number-schools  ;; create the schools, then initialize their variables
  [
    set color white
    set school-size 1 + random-float 4
    set biomass biomass + school-size
    pick-pixel
    setxy random-float max-pxcor random-float max-pycor
  ]

  create-boats number-boats  ;; create the boats, then initialize their variables
  [
    set size 2
    set catch 0
    setxy random-float max-pxcor random-float max-pycor ; boats are randomly places
    set total-catch 0 ;running cumulative of caught fish (catch) per boat
    set color red
  ]
  reset-ticks
end

to go
  set biomass 0
  set yield 0

  ask schools [movefish set biomass biomass + school-size]
  ask schools [grow-fish]

  ask boats [
    set total-catch 0
    go-fish
    set yield yield + catch
  ]
  set cumyield cumyield + yield
  ask boats [
    moveboats
  ]
  if ticks >= 2000 [
    set cumbiomass cumbiomass + biomass / 100
  ]
  tick
;  if not any? schools [stop]
end

to movefish
  rt random-float 50 - random-float 50
  fd 1
end

to moveboats
  if movementrule = "random" [rt random-float 50 - random-float 50]
  if movementrule = "radius" [
    if count schools in-radius radius > 0 [
      let target min-one-of schools [distance myself]
      face target
    ]
  ]
  fd 1
end

to grow-fish   ;; fish dynamics
  if school-size < 1 [ die ]
  let averagegrowthrate growth-rate * ( 1 - biomass / carrying-capacity)
  set school-size school-size + averagegrowthrate * school-size
  pick-pixel
  if school-size > 50 ;; split up big schools
  [
    set school-size 25
    movefish
    hatch 1 [set school-size 25 pick-pixel movefish]
    pick-pixel
  ]
end

to pick-pixel
  set size school-size / 5
end

to go-fish ;; fishing

  let prey nobody 
  ifelse catch > 0  ;for strategy 1
  [set catch 0] ; for strategy 1

  [
    set catch 0
  set prey one-of schools-on patch-here
  if prey = nobody [set prey one-of schools-on neighbors]     ;; grab a random school nearby
  if (prey != nobody) and ([school-size] of prey > 10) ; for strategy 7;; did we get one?
  [
    ifelse total-catch +  [school-size] of prey  >= boat-capacity
    [
      set catch boat-capacity - total-catch
      let catch2 catch
      ask prey [set school-size school-size - catch2]
    ]
    [
      set catch [school-size] of prey
      ask prey [die]
    ]

]]
    set total-catch total-catch + catch
end
